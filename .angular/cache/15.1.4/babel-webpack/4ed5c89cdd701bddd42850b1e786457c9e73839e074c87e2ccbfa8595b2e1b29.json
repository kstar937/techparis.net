{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./api.service\";\nimport * as i2 from \"@angular/router\";\nexport class GuardGuard {\n  constructor(dataservice, router) {\n    this.dataservice = dataservice;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    //return true;\n    const routeurl = state.url;\n    return this.isLogin(routeurl);\n  }\n  isLogin(routeurl) {\n    if (this.dataservice.isLoggedIn()) {\n      return true;\n    }\n    this.dataservice.redirectUrl = routeurl;\n    this.router.navigate(['/login'], {\n      queryParams: {\n        returnUrl: routeurl\n      }\n    });\n  }\n}\nGuardGuard.ɵfac = function GuardGuard_Factory(t) {\n  return new (t || GuardGuard)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.Router));\n};\nGuardGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GuardGuard,\n  factory: GuardGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,UAAU;EAErBC,YAAoBC,WAAuB,EACvBC,MAAc;IADd,gBAAW,GAAXD,WAAW;IACX,WAAM,GAANC,MAAM;EAEd;EAEZC,WAAW,CACTC,KAA6B,EAC7BC,KAA0B;IAC1B;IAEA,MAAMC,QAAQ,GAAWD,KAAK,CAACE,GAAG;IAClC,OAAO,IAAI,CAACC,OAAO,CAACF,QAAQ,CAAC;EAC/B;EAEAE,OAAO,CAACF,QAAgB;IACtB,IAAI,IAAI,CAACL,WAAW,CAACQ,UAAU,EAAE,EAAE;MACjC,OAAO,IAAI;;IAGb,IAAI,CAACR,WAAW,CAACS,WAAW,GAAGJ,QAAQ;IACvC,IAAI,CAACJ,MAAM,CAACS,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE;MAACC,WAAW,EAAE;QAACC,SAAS,EAAEP;MAAQ;IAAC,CAAC,CAAE;EAEzE;;AAxBWP,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAe,SAAVf,UAAU;EAAAgB,YAFT;AAAM","names":["GuardGuard","constructor","dataservice","router","canActivate","route","state","routeurl","url","isLogin","isLoggedIn","redirectUrl","navigate","queryParams","returnUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\karan\\OneDrive\\Documents\\techparis.net\\src\\app\\guard.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { ApiService } from './api.service';\nimport { Router } from '@angular/router';\n@Injectable({\n  providedIn: 'root'\n})\nexport class GuardGuard implements CanActivate {\n\n  constructor(private dataservice: ApiService,\n              private router: Router,) {\n\n              }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): any {\n    //return true;\n\n    const routeurl: string = state.url;\n    return this.isLogin(routeurl);\n  };\n\n  isLogin(routeurl: string) {\n    if (this.dataservice.isLoggedIn()) {\n      return true;\n    }\n\n    this.dataservice.redirectUrl = routeurl;\n    this.router.navigate(['/login'], {queryParams: {returnUrl: routeurl}} );\n\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}